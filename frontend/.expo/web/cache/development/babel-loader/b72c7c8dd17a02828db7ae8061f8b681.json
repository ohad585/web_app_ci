{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport apiClient from \"./ApiClient\";\nvar getAllMessages = function () {\n  var _ref = _asyncToGenerator(function* () {\n    var res = yield apiClient.get(\"/msg/\");\n    var messages = Array();\n    console.log(\"Getting all messages\");\n    if (res.data) {\n      res.data.forEach(function (element) {\n        var msg = {\n          sender: element.sender,\n          text: element.message\n        };\n        console.log(\"added msg \" + msg.sender + \" \" + msg.text);\n        messages.push(msg);\n      });\n    } else {\n      console.log(\"getAllUser fail\");\n    }\n    return messages;\n  });\n  return function getAllMessages() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar addMessage = function () {\n  var _ref2 = _asyncToGenerator(function* (msg) {\n    var res = yield apiClient.post(\"/msg/\", {\n      sender: msg.sender,\n      text: msg.text\n    });\n    if (res.ok) {\n      console.log(\"Added message\");\n    } else {\n      console.log(\"addMessage fail\");\n      return null;\n    }\n  });\n  return function addMessage(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport default {\n  addMessage: addMessage,\n  getAllMessages: getAllMessages\n};","map":{"version":3,"names":["apiClient","getAllMessages","_ref","_asyncToGenerator","res","get","messages","Array","console","log","data","forEach","element","msg","sender","text","message","push","apply","arguments","addMessage","_ref2","post","ok","_x"],"sources":["/Users/ohadshalom/Desktop/devops_projects/cicd_project/frontend/model/ims_api.tsx"],"sourcesContent":["import apiClient from \"./ApiClient\";\nimport { Message } from \"./ims_model\";\n\nconst getAllMessages = async () => {\n    const res = await apiClient.get(\"/msg/\");\n    let messages = Array<Message>()\n    console.log(\"Getting all messages\");\n    \n    if(res.data){\n      res.data.forEach((element) => {\n        const msg:Message ={\n          sender:element.sender,\n          text:element.message\n        }\n        console.log(\"added msg \"+msg.sender+\" \"+msg.text);\n        \n        messages.push(msg)\n      });\n    }else {\n      console.log(\"getAllUser fail\");\n      \n    }\n    return messages\n  };\n\n  const addMessage = async (msg: Message) => {\n    const res = await apiClient.post(\"/msg/\",{\n      sender:msg.sender,\n      text:msg.text\n    });\n    if(res.ok){\n    \n      console.log(\"Added message\");\n      \n    }else {\n      console.log(\"addMessage fail\");\n      return null\n    }};\n  \n  export default {addMessage,getAllMessages}"],"mappings":";AAAA,OAAOA,SAAS;AAGhB,IAAMC,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC/B,IAAMC,GAAG,SAASJ,SAAS,CAACK,GAAG,CAAC,OAAO,CAAC;IACxC,IAAIC,QAAQ,GAAGC,KAAK,EAAW;IAC/BC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IAEnC,IAAGL,GAAG,CAACM,IAAI,EAAC;MACVN,GAAG,CAACM,IAAI,CAACC,OAAO,CAAC,UAACC,OAAO,EAAK;QAC5B,IAAMC,GAAW,GAAE;UACjBC,MAAM,EAACF,OAAO,CAACE,MAAM;UACrBC,IAAI,EAACH,OAAO,CAACI;QACf,CAAC;QACDR,OAAO,CAACC,GAAG,CAAC,YAAY,GAACI,GAAG,CAACC,MAAM,GAAC,GAAG,GAACD,GAAG,CAACE,IAAI,CAAC;QAEjDT,QAAQ,CAACW,IAAI,CAACJ,GAAG,CAAC;MACpB,CAAC,CAAC;IACJ,CAAC,MAAK;MACJL,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAEhC;IACA,OAAOH,QAAQ;EACjB,CAAC;EAAA,gBApBGL,cAAcA,CAAA;IAAA,OAAAC,IAAA,CAAAgB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoBjB;AAED,IAAMC,UAAU;EAAA,IAAAC,KAAA,GAAAlB,iBAAA,CAAG,WAAOU,GAAY,EAAK;IACzC,IAAMT,GAAG,SAASJ,SAAS,CAACsB,IAAI,CAAC,OAAO,EAAC;MACvCR,MAAM,EAACD,GAAG,CAACC,MAAM;MACjBC,IAAI,EAACF,GAAG,CAACE;IACX,CAAC,CAAC;IACF,IAAGX,GAAG,CAACmB,EAAE,EAAC;MAERf,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAE9B,CAAC,MAAK;MACJD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B,OAAO,IAAI;IACb;EAAC,CAAC;EAAA,gBAZEW,UAAUA,CAAAI,EAAA;IAAA,OAAAH,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAYZ;AAEJ,eAAe;EAACC,UAAU,EAAVA,UAAU;EAACnB,cAAc,EAAdA;AAAc,CAAC"},"metadata":{},"sourceType":"module"}