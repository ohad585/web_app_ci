{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport { CryptoEncoding } from \"./Crypto.types\";\nexport default {\n  get name() {\n    return 'ExpoCrypto';\n  },\n  digestStringAsync: function () {\n    var _digestStringAsync = _asyncToGenerator(function* (algorithm, data, options) {\n      if (!crypto.subtle) {\n        throw new CodedError('ERR_CRYPTO_UNAVAILABLE', 'Access to the WebCrypto API is restricted to secure origins (https).');\n      }\n      var encoder = new TextEncoder();\n      var buffer = encoder.encode(data);\n      var hashedData = yield crypto.subtle.digest(algorithm, buffer);\n      if (options.encoding === CryptoEncoding.HEX) {\n        return hexString(hashedData);\n      } else if (options.encoding === CryptoEncoding.BASE64) {\n        return btoa(String.fromCharCode.apply(String, _toConsumableArray(new Uint8Array(hashedData))));\n      }\n      throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n    });\n    function digestStringAsync(_x, _x2, _x3) {\n      return _digestStringAsync.apply(this, arguments);\n    }\n    return digestStringAsync;\n  }()\n};\nfunction hexString(buffer) {\n  var byteArray = new Uint8Array(buffer);\n  var hexCodes = _toConsumableArray(byteArray).map(function (value) {\n    var hexCode = value.toString(16);\n    var paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n  return hexCodes.join('');\n}","map":{"version":3,"names":["CodedError","CryptoEncoding","name","digestStringAsync","_digestStringAsync","_asyncToGenerator","algorithm","data","options","crypto","subtle","encoder","TextEncoder","buffer","encode","hashedData","digest","encoding","HEX","hexString","BASE64","btoa","String","fromCharCode","apply","_toConsumableArray","Uint8Array","_x","_x2","_x3","arguments","byteArray","hexCodes","map","value","hexCode","toString","paddedHexCode","padStart","join"],"sources":["../src/ExpoCrypto.web.ts"],"sourcesContent":["import { CodedError } from 'expo-modules-core';\n\nimport { CryptoDigestAlgorithm, CryptoEncoding, CryptoDigestOptions } from './Crypto.types';\n\nexport default {\n  get name(): string {\n    return 'ExpoCrypto';\n  },\n  async digestStringAsync(\n    algorithm: CryptoDigestAlgorithm,\n    data: string,\n    options: CryptoDigestOptions\n  ): Promise<string> {\n    if (!crypto.subtle) {\n      throw new CodedError(\n        'ERR_CRYPTO_UNAVAILABLE',\n        'Access to the WebCrypto API is restricted to secure origins (https).'\n      );\n    }\n    const encoder = new TextEncoder();\n    const buffer = encoder.encode(data);\n    const hashedData = await crypto.subtle.digest(algorithm, buffer);\n    if (options.encoding === CryptoEncoding.HEX) {\n      return hexString(hashedData);\n    } else if (options.encoding === CryptoEncoding.BASE64) {\n      return btoa(String.fromCharCode(...new Uint8Array(hashedData)));\n    }\n    throw new CodedError('ERR_CRYPTO_DIGEST', 'Invalid encoding type provided.');\n  },\n};\n\nfunction hexString(buffer: ArrayBuffer): string {\n  const byteArray = new Uint8Array(buffer);\n\n  const hexCodes = [...byteArray].map((value) => {\n    const hexCode = value.toString(16);\n    const paddedHexCode = hexCode.padStart(2, '0');\n    return paddedHexCode;\n  });\n\n  return hexCodes.join('');\n}\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAE9C,SAAgCC,cAAc;AAE9C,eAAe;EACb,IAAIC,IAAIA,CAAA;IACN,OAAO,YAAY;EACrB,CAAC;EACKC,iBAAiB;IAAA,IAAAC,kBAAA,GAAAC,iBAAA,YACrBC,SAAgC,EAChCC,IAAY,EACZC,OAA4B;MAE5B,IAAI,CAACC,MAAM,CAACC,MAAM,EAAE;QAClB,MAAM,IAAIV,UAAU,CAClB,wBAAwB,EACxB,sEAAsE,CACvE;;MAEH,IAAMW,OAAO,GAAG,IAAIC,WAAW,EAAE;MACjC,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAACP,IAAI,CAAC;MACnC,IAAMQ,UAAU,SAASN,MAAM,CAACC,MAAM,CAACM,MAAM,CAACV,SAAS,EAAEO,MAAM,CAAC;MAChE,IAAIL,OAAO,CAACS,QAAQ,KAAKhB,cAAc,CAACiB,GAAG,EAAE;QAC3C,OAAOC,SAAS,CAACJ,UAAU,CAAC;OAC7B,MAAM,IAAIP,OAAO,CAACS,QAAQ,KAAKhB,cAAc,CAACmB,MAAM,EAAE;QACrD,OAAOC,IAAI,CAACC,MAAM,CAACC,YAAY,CAAAC,KAAA,CAAnBF,MAAM,EAAAG,kBAAA,CAAiB,IAAIC,UAAU,CAACX,UAAU,CAAC,EAAC,CAAC;;MAEjE,MAAM,IAAIf,UAAU,CAAC,mBAAmB,EAAE,iCAAiC,CAAC;IAC9E,CAAC;IAAA,SAAAG,kBAAAwB,EAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAzB,kBAAA,CAAAoB,KAAA,OAAAM,SAAA;IAAA;IAAA,OAAA3B,iBAAA;EAAA;CACF;AAED,SAASgB,SAASA,CAACN,MAAmB;EACpC,IAAMkB,SAAS,GAAG,IAAIL,UAAU,CAACb,MAAM,CAAC;EAExC,IAAMmB,QAAQ,GAAGP,kBAAA,CAAIM,SAAS,EAAEE,GAAG,CAAC,UAACC,KAAK,EAAI;IAC5C,IAAMC,OAAO,GAAGD,KAAK,CAACE,QAAQ,CAAC,EAAE,CAAC;IAClC,IAAMC,aAAa,GAAGF,OAAO,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;IAC9C,OAAOD,aAAa;EACtB,CAAC,CAAC;EAEF,OAAOL,QAAQ,CAACO,IAAI,CAAC,EAAE,CAAC;AAC1B"},"metadata":{},"sourceType":"module"}